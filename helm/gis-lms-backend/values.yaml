postgres:
  enabled: true
  architecture: standalone
  auth:
    enablePostgresUser: true
    username: "myuser"
    database: "mydatabase"
    existingSecret: "gis-lms-backend-secret"
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
      replicationPasswordKey: replication-password
  primary:
    persistence:
      enabled: true
      size: 8Gi
  service:
    type: ClusterIP
    ports:
      postgresql: 5432
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: "17.2.0-debian-12-r8"
    pullPolicy: IfNotPresent
  networkPolicy:
    enabled: true
    allowExternal: false
    allowExternalEgress: false
    extraIngress:
      - ports:
          - port: 5432
        from:
          - podSelector:
              matchLabels:
                app: gis-lms-backend

app-template:
  global:
    fullnameOverride: gis-lms-backend
    namespace: my-namespace
    labels:
      app: gis-lms-backend

  defaultPodOptions:
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000

  controllers:
    myController:
      type: deployment
      replicas: 1
      containers:
        app:
          nameOverride: gis-lms-backend-app
          image:
            repository: ghcr.io/stephane-segning/gis-lessons-backend
            tag: latest
            pullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: gis-lms-backend-config
            - secretRef:
                name: gis-lms-backend-secret
          env:
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: gis-lms-backend-secret
                  key: db_url
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gis-lms-backend-secret
                  key: db_password

  service:
    app:
      enabled: true
      annotations: {}
      nameOverride: service
      type: ClusterIP
      controller: myController
      ports:
        http:
          enabled: true
          port: 3000
          targetPort: 3000

  ingress:
    app:
      enabled: true
      annotations: {}
      nameOverride: ingress
      className: "nginx"
      hosts:
        - host: gis-lms-backend.example.com
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: app
                port: http
      tls:
        - secretName: my-tls-secret
          hosts:
            - gis-lms-backend.example.com

  configMaps:
    config:
      enabled: true
      labels:
        app: gis-lms-backend
      annotations:
        description: "Configuration for the GIS LMS Backend application."
      data:
        DB_MAX_THREAD_POOL: "10"
        HOST: "0.0.0.0"
        PORT: "3000"
        LOG_LEVEL: "debug"
        OTLP_SPAN_ENDPOINT: "http://localhost:4317"
        OTLP_METRIC_ENDPOINT: "http://localhost:4318/v1/metrics"
        OTLP_SERVICE_NAME: "rust-app-example"
        OTLP_VERSION: "0.1.0"

  networkpolicies:
    myNetworkPolicy:
      enabled: true
      controller: myController
      policyTypes:
        - Ingress
        - Egress
      rules:
        ingress:
          - from:
              - podSelector:
                  matchLabels:
                    app: gis-lms-backend
            ports:
              - protocol: TCP
                port: 3000

        egress:
          - to:
              - podSelector:
                  matchLabels:
                    app: postgres
            ports:
              - protocol: TCP
                port: 5432
